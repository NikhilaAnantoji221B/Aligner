
`ifndef CFS_ALGN_TEST_CLR_1WRITE1_SV
`define CFS_ALGN_TEST_CLR_1WRITE1_SV 
class cfs_algn_md_tests_3_2_4 extends cfs_algn_test_base;
 `uvm_component_utils(cfs_algn_test_clr_1write1)
 
function new(string name = "", uvm_component parent = null);
super.new(name, parent);
endfunction
 
virtual task run_phase(uvm_phase phase);
 
cfs_md_sequence_slave_response_forever resp_seq;
cfs_algn_virtual_sequence_reg_config cfg_seq;
cfs_algn_virtual_sequence_rx_err err_seq;

cfs_algn_vif vif;
uvm_reg_data_t cnt_val;
uvm_reg_data_t clr_val;


 
  phase.raise_objection(this, "TEST_START");
 
#(100ns);
 

    fork

      begin

    join_none


// Step 1: Register config
    cfg_seq = cfs_algn_virtual_sequence_reg_config::type_id::create("cfg_seq");

    cfg_seq.set_sequencer(env.virtual_sequencer);

    cfg_seq.start(env.virtual_sequencer);
 
    // Step 2: Manual CTRL config

    env.model.reg_block.CTRL.write(status, 32'h00000004, UVM_FRONTDOOR);
    env.model.reg_block.CTRL.read(status, ctrl_val, UVM_FRONTDOOR);

    `uvm_info("1write1", $sformatf("CTRL register value: 0x%0h", ctrl_val), UVM_MEDIUM)
 
    // Step 3: Wait post reset
    vif = env.env_config.get_vif();

    repeat (50) @(posedge vif.clk);
 
    // Step 4: Send 255 RX packets 

    for (int i = 0; i < 255; i++) begin
      err_seq = cfs_algn_virtual_sequence_rx_err::type_id::create($sformatf("rx_size1_%0d", i));
